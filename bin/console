#!/usr/bin/env ruby

require 'bundler/setup'
require 'pry'
require 'vic20'

memory = Vic20::Memory.new
processor = Vic20::Processor.new(memory)

processor.reset

commands = Pry::CommandSet.new do
  import_from Pry::Commands, 'help'

  create_command 'list' do
    group 'Machine'
    description 'List instructions at current program counter.'

    def process
      initial_pc = processor.pc

      _pry_.pager.open do |output|
        processor.each do |address, method, addressing_mode, bytes|
          output.puts format_instruction(address, method, addressing_mode, bytes)
        end
      end

    ensure
      processor.pc = initial_pc
    end
  end

  create_command 'step' do
    group 'Machine'
    description 'Execute single instruction at current program counter.'

    def process
      initial_pc = processor.pc

      address, method, addressing_mode, bytes = processor.each.next
      output.puts format_instruction(address, method, addressing_mode, bytes)
      processor.send(method, addressing_mode, bytes)

    rescue
      processor.pc = initial_pc
      raise
    end
  end

  helpers do
    def format_assembly(method, addressing_mode, bytes)
      "; #{method.upcase} #{Vic20::Processor.format_operand(addressing_mode, bytes)}"
    end

    def format_instruction(address, method, addressing_mode, bytes)
      [
        format('%04X', address),
        bytes.map { |byte| format('%02X', byte) }.join(' ').ljust(8, ' '),
        format_assembly(method, addressing_mode, bytes),
      ].join('  ')
    end

    def processor
      target_self
    end
  end
end

processor.pry commands: commands, prompt: [proc { "#{processor.current_state} > " }, proc { ' | ' }]
