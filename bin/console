#!/usr/bin/env ruby

require 'bundler/setup'
require 'pry'
require 'vic20'

processor = Vic20::Processor.new(Vic20::Memory.new)
processor.pc = memory.word_at(0xC000)

Pry.commands.block_command 'dasm' do
  processor.each do |address, method, addressing_mode, *memory|
    printf '%04X  %02X ', address, memory[0]

    case addressing_mode
    when :accumulator, :implied
      print '     '
    when :immediate, :indirect_x, :indirect_y, :relative, :zero_page, :zero_page_x, :zero_page_y
      printf '%02X   ', memory[1]
    when :absolute, :absolute_x, :absolute_y, :indirect
      printf '%02X %02X', memory[1], memory[2]
    end

    printf "  ; #{method.upcase}"

    case addressing_mode
    when :absolute
      printf ' $%04X', memory[1] + memory[2] * 256
    when :absolute_x
      printf ' $%04X,X', memory[1] + memory[2] * 256
    when :absolute_y
      printf ' $%04X,Y', memory[1] + memory[2] * 256
    when :accumulator
      printf ' A'
    when :immediate
      printf ' #$%02X', memory[1]
    when :implied
    when :indirect
      printf ' ($%04X)', memory[1] + memory[2] * 256
    when :indirect_x
      printf ' ($%02X,X)', memory[1]
    when :indirect_y
      printf ' ($%02X),Y', memory[1]
    when :relative, :zero_page
      printf ' $%02X', memory[1]
    when :zero_page_x
      printf ' $%02X,X', memory[1]
    when :zero_page_y
      printf ' $%02X,Y', memory[1]
    end
    puts
  end
end

processor.pry prompt: [proc { "#{processor.current_state} > " }, proc { ' | ' }]
