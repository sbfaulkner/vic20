#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'vic20'

require 'pry'

require 'optparse'

options = {
  expansion: 0,
  roms: [],
}

INVALID_EXPANSION_ERROR = "invalid size for expansion RAM (should be one of 0, 3, 8, 11, 16, 19, 24, or 27)"

OptionParser.new do |opts|
  opts.banner = 'Usage: run [options] [firmware]'

  opts.on('-e', '--expansion size', 'add specified RAM') do |size|
    raise ArgumentError, INVALID_EXPANSION_ERROR unless %w(0 3 8 11 16 19 24 27).include?(size)
    options[:expansion] = size.to_i
  end

  opts.on('-l', '--load path', 'load specified rom') do |path|
    options[:roms] << path
  end

  opts.on('-r', '--reset address', 'override reset vector') do |address, *|
    options[:reset] = address.to_i(16)
  end

  opts.on('-v', '--verbose', 'turn on verbose mode') do |v|
    options[:verbose] = v
  end
end.parse!

Vic20::Processor.prepend Vic20::Processor::Halt

if options[:verbose]
  Vic20::Processor.prepend Vic20::Processor::Trace
else
  Vic20::Processor.prepend Vic20::Processor::Report
end

Vic20::Processor.prepend Vic20::Processor::Breakpoints

memory = Vic20::Memory.new(expansion: options[:expansion])

if ARGV[0]
  memory.load(ARGV[0])
else
  memory.load_firmware
end

memory.load_roms(*options[:roms])

processor = Vic20::Processor.new(memory, pc: options[:reset])

commands = Pry::CommandSet.new do
  import_from(Pry::Commands, 'help')

  create_command('breakpoint') do
    group('Machine')
    description('Set breakpoint at specified address.')

    def process
      processor.breakpoints << args.first.to_i(16) if args.first

      processor.breakpoints.each_with_index do |address, index|
        output.puts "#{index + 1}: $#{address.to_s(16).rjust(4, '0')}"
      end
    end
  end

  alias_command('b', 'breakpoint')

  create_command('dasm') do
    group('Machine')
    description('Disassemble instructions at current program counter.')

    def process
      initial_pc = processor.pc

      _pry_.pager.open do |output|
        processor.each do |address, instruction|
          output.puts processor.format_instruction(address, instruction)
        end
      end

    ensure
      processor.pc = initial_pc
    end
  end

  alias_command('d', 'dasm')

  create_command('list') do
    group('Machine')
    description('List memory contents')

    def process
      address = args.first ? args.first.to_i(16) : processor.pc

      _pry_.pager.open do |output|
        memory.get_bytes(address, 64 * 1024 - address + 1).each_slice(16) do |slice|
          output.puts format_memory(address, slice)
          address += 16
        end
      end
    end
  end

  alias_command('l', 'list')

  create_command('run') do
    group('Machine')
    description('Run program from current program counter.')

    def process
      processor.run
    end
  end

  alias_command('r', 'run')

  create_command('step') do
    group('Machine')
    description('Execute single instruction at current program counter.')

    def process
      initial_pc = processor.pc

      address, instruction = processor.fetch_instruction

      output.puts processor.format_instruction(address, instruction)
      processor.execute(address, instruction)

    rescue
      processor.pc = initial_pc
      raise
    end
  end

  alias_command('s', 'step')

  helpers do
    def format_memory(address, bytes)
      [
        format('%04X', address),
        bytes.map { |byte| format('%02X', byte) }.join(' '),
        bytes.pack('c*').gsub(/[^[:print:]]/, '.'),
      ].join('  ')
    end

    def memory
      processor.instance_variable_get(:@memory)
    end

    def processor
      target_self
    end
  end
end

processor.pry(
  commands: commands,
  prompt: [proc { "#{processor.current_state} > " }, proc { ' | ' }]
)
