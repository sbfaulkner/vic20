#!/usr/bin/env ruby

require 'bundler/setup'
require 'vic20'

require 'optparse'
require 'scanf'

options = {
  expansion: 0,
}

OptionParser.new do |opts|
  opts.banner = 'Usage: run [options] [firmware]'

  opts.on('-e', '--expansion size', 'add specified RAM') do |size|
    raise ArgumenError, "invalid size for expansion RAM (should be one of 0, 3, 8, 11, 16, 19, 24, or 27)" unless %w(0 3 8 11 16 19 24 27).include?(size)
    options[:expansion] = size.to_i
  end

  opts.on('-p', '--profile', 'profile execution') do |profile|
    options[:profile] = profile
  end

  opts.on('-P', '--protection', 'protect ROM from writes') do |protection|
    options[:protection] = protection
  end

  opts.on('-r', '--reset address', 'override reset vector') do |address, *|
    options[:reset] = address.to_i(16)
  end

  opts.on('-s', '--screendump', 'dump screen memory') do |dump|
    options[:screendump] = dump
  end

  opts.on('-v', '--verbose', 'turn on verbose mode') do |verbose|
    options[:verbose] = verbose
  end
end.parse!

Vic20::Processor.prepend Vic20::Processor::Halt

if options[:verbose]
  Vic20::Processor.prepend Vic20::Processor::Trace
else
  Vic20::Processor.prepend Vic20::Processor::Report
end

if options[:profile]
  Vic20::Processor.prepend Vic20::Processor::Profile
end

if options[:protection]
  Vic20::Memory.prepend Vic20::Memory::Protection
end

if options[:screendump]
  Vic20::Memory.prepend Vic20::Memory::Screendump
end

memory = Vic20::Memory.new(ARGV[0], expansion: options[:expansion])
processor = Vic20::Processor.new(memory)

processor.reset(options[:reset])

processor.run
