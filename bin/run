#!/usr/bin/env ruby

require 'bundler/setup'
require 'vic20'

require 'optparse'
require 'scanf'

options = {}

OptionParser.new do |opts|
  opts.banner = 'Usage: run [options] [firmware]'

  opts.on('-r', '--reset address', 'override reset vector') do |address, *|
    options[:reset] = address.to_i(16)
  end

  opts.on('-v', '--verbose', 'turn on verbose mode') do |v|
    options[:verbose] = v
  end
end.parse!

memory = Vic20::Memory.new(ARGV[0])
processor = Vic20::Processor.new(memory)

processor.reset(options[:reset])

def format_assembly(method, addressing_mode, bytes)
  "; #{method.upcase} #{Vic20::Processor.format_operand(addressing_mode, bytes)}"
end

def format_instruction(address, method, addressing_mode, bytes)
  [
    format('%04X', address),
    bytes.map { |byte| format('%02X', byte) }.join(' ').ljust(8, ' '),
    format_assembly(method, addressing_mode, bytes),
  ].join('  ')
end

processor.each do |address, method, addressing_mode, bytes|
  if options[:verbose]
    STDERR.puts processor.current_state
    STDERR.puts format_instruction(address, method, addressing_mode, bytes)
  end

  begin
    processor.send(method, addressing_mode, bytes)
    raise Vic20::Processor::Trap if processor.pc == address
  rescue
    unless options[:verbose]
      STDERR.puts processor.current_state
      STDERR.puts format_instruction(address, method, addressing_mode, bytes)
    end
    raise
  end
end
